image: dregistry.gahr.dev/ci-go-runner

# Keep vendor dependencies between jobs (results in lower build times)
cache: &global_cache
  untracked: true
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .cache
  policy: pull

before_script:
  - export GOPATH="$CI_PROJECT_DIR/.cache"

stages:
  - dependencies
  - pre-build
  - test
  - build
  - deploy

# --- dependencies stage ---

make dependencies: # pull cache, update dependencies, push cache
  cache:
    # inherit all global cache settings
    <<: *global_cache
    # override the policy
    policy: pull-push
  stage: dependencies
  script:
    - make dep
  tags:
    - GameBase
    - docker

# --- pre-build stage (generate server stub via openapi) ---

generate openapi:
  script:
    - apt update && apt install -y curl
    - curl -sL https://deb.nodesource.com/setup_14.x | bash -
    - apt update && apt install -y nodejs default-jre rsync
    - make generate
    - BRANCH="swagger-$(cat swagger-version)"
    - git checkout -b $BRANCH || git checkout $BRANCH
    - git config --global user.email "info@game-base.de" && git config --global user.name "Swagger Server Generator"
    - git add api* openapi*
    - git commit -m "Generate server from API specification $(cat swagger-version) https://gitlab.tandashi.de/GameBase/swagger-rest-api/-/commit/$(cat swagger-commit)"
    - git push -u origin && exit 1
  stage: pre-build
  artifacts:
    paths:
      - .
  only:
    refs:
      - GB-138
  tags:
    - GameBase
    - docker

# --- tests begin here (only pull cache) ---

unit tests:
  stage: test
  script:
    - make test
  tags:
    - GameBase
    - docker

race detector:
  stage: test
  script:
    - make race
  tags:
    - GameBase
    - docker

memory sanitizer:
  stage: test
  script:
    - make msan
  tags:
    - GameBase
    - docker

code coverage:
  stage: test
  script:
    - make coverage
  tags:
    - GameBase
    - docker

code coverage report:
  stage: test
  script:
    - make coverhtml
  only:
  - master
  artifacts:
    paths:
      - coverage.html
  tags:
    - GameBase
    - docker

lint code:
  stage: test
  script:
    - make lint
  allow_failure: true
  tags:
    - GameBase
    - docker

sonarqube-check:
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  stage: test
  script:
    - sonar-scanner -D"sonar.projectKey=gamebase-daemon" -D"sonar.sources=." -D"sonar.host.url=https://sonarqube.gahr.dev" -D"sonar.sourceEncoding=UTF-8" -D"sonar.login=${SONARQUBE_LOGIN}"
  allow_failure: true
  only:
    - master

# --- tests end ---

# --- build stage ---

build:
  stage: build
  script:
    - make
  artifacts:
    paths:
      - out
  tags:
    - GameBase
    - docker


# --- deploy stage ---

deploy master:
  stage: deploy
  script:
    - cp ~/.kube/config config
    - docker build -t gamebase-backend-live .
    - docker stop gamebase-backend-live || true
    - docker rm gamebase-backend-live || true
    - docker run -d --restart unless-stopped -p 42070:80 --name gamebase-backend-live gamebase-backend-live
  only:
    - master
  tags:
    - GameBase
    - shell

deploy dev:
  stage: deploy
  script:
    - cp ~/.kube/config config
    - docker build -t gamebase-backend-dev .
    - docker stop gamebase-backend-dev || true
    - docker rm gamebase-backend-dev || true
    - docker run -d --restart unless-stopped -p 42069:80 --name gamebase-backend-dev gamebase-backend-dev
  except:
    refs:
      - master
    variables:
      - $GENERATE_OPENAPI == "true"
  tags:
    - GameBase
    - shell

pages:
  stage: deploy
  script:
    - mkdir public
    - cp coverage.html public
  artifacts:
    paths:
      - public/
  only:
    - master
  tags:
    - GameBase
