/*
 * GameBase Communication API
 *
 * This is the REST API used as an communication layer between backend and frontend.
 *
 * API version: 1.0.0
 * Contact: gamebase@gahr.dev
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"github.com/gin-gonic/gin"
	appsv1 "k8s.io/api/apps/v1"
)

var api = NewAPI()

func AsGameServerStatus(deployment *appsv1.Deployment) *GameServerStatus {
	return &GameServerStatus{
		Id:    deployment.Name,
		Image: deployment.Spec.Template.Spec.Containers[0].Image,
		State: deployment.Status.Replicas,
	}
}

// ConfigureContainer - Configure a game server based on POST body
func ConfigureContainer(c *gin.Context) {
	newHttpRequestAuthenticator().ConfigureContainer(c)
}

// DeleteContainer - Delete deployment of game server
func DeleteContainer(c *gin.Context) {
	newHttpRequestAuthenticator().DeleteContainer(c)
}

// DeployContainer - Deploy a game server based on POST body
func DeployContainer(c *gin.Context) {
	newHttpRequestAuthenticator().DeployContainer(c)
}

// GetStatus - Query status of all deployments
func GetStatus(c *gin.Context) {
	newHttpRequestAuthenticator().GetStatus(c)
}

// ListImages - Get a list of all available game server images
func ListImages(c *gin.Context) {
	newHttpRequestAuthenticator().ListImages(c)
}

// RestartContainer - Restart a game server/container
func RestartContainer(c *gin.Context) {
	newHttpRequestAuthenticator().RestartContainer(c)
}

// StartContainer - Start a game server/container
func StartContainer(c *gin.Context) {
	newHttpRequestAuthenticator().StartContainer(c)
}

// StopContainer - Stop a game server/container
func StopContainer(c *gin.Context) {
	newHttpRequestAuthenticator().StopContainer(c)
}
