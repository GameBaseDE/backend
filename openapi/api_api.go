/*
 * GameBase Communication API
 *
 * This is the REST API used as an communication layer between backend and frontend.
 *
 * API version: 1.0.0
 * Contact: gamebase@gahr.dev
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

var api = NewAPI()

// ConfigureContainer - Configure a game server based on POST body
func ConfigureContainer(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// DeleteContainer - Delete deployment of game server
func DeleteContainer(c *gin.Context) {
	id := c.Query("id")
	if id == "" {
		id = c.Param("id")
		if id == "" {
			c.JSON(http.StatusBadRequest, gin.H{"status": "error"})
			return
		}
	}

	if err := api.Destroy(id); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"status": err.Error()})
		return
	}

	c.JSON(http.StatusAccepted, gin.H{"status": "ok"})
}

// DeployContainer - Deploy a game server based on POST body
func DeployContainer(c *gin.Context) {
	var request GameServerConfigurationTemplate
	if err := c.ShouldBindJSON(&request); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	if id, err := api.Deploy(request); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
	} else {
		h := gin.H{"status": "ok"}
		h["id"] = id
		c.JSON(http.StatusCreated, h)
	}
}

// GetStatus - Query status of a container
func GetStatus(c *gin.Context) {
	id, exists := c.GetQuery("id")

	if !exists {
		c.JSON(http.StatusBadRequest, gin.H{"status": "error", "message": "error"})
		return
	}

	if result, err := api.Status(id); err == nil {
		h := gin.H{"status": "ok"}
		h["message"] = result
		c.JSON(http.StatusOK, h)
		return
	}

	c.JSON(http.StatusBadRequest, gin.H{"status": "error", "message": "error"})
}

// RestartContainer - Restart a game server/container
func RestartContainer(c *gin.Context) {
	id := c.Param("id")
	if id == "" {
		c.JSON(http.StatusBadRequest, gin.H{"status": "error"})
		return
	}

	if result, err := api.Restart(id); err == nil {
		h := gin.H{"status": "ok"}
		h["message"] = result
		c.JSON(http.StatusAccepted, h)
	} else {
		c.JSON(http.StatusInternalServerError, gin.H{"status": "error", "message": err.Error()})
	}
}

// StartContainer - Start a game server/container
func StartContainer(c *gin.Context) {
	id := c.Param("id")
	if id == "" {
		c.JSON(http.StatusBadRequest, gin.H{"status": "error"})
		return
	}

	if result, err := api.Start(id); err == nil {
		h := gin.H{"status": "ok"}
		h["message"] = result
		c.JSON(http.StatusAccepted, h)
	} else {
		c.JSON(http.StatusInternalServerError, gin.H{"status": "error", "message": err.Error()})
	}
}

// StopContainer - Stop a game server/container
func StopContainer(c *gin.Context) {
	id := c.Param("id")
	if id == "" {
		c.JSON(http.StatusBadRequest, gin.H{"status": "error"})
		return
	}

	if result, err := api.Stop(id); err == nil {
		h := gin.H{"status": "ok"}
		h["message"] = result
		c.JSON(http.StatusAccepted, h)
	} else {
		c.JSON(http.StatusInternalServerError, gin.H{"status": "error", "message": err.Error()})
	}
}
