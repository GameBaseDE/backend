openapi: 3.0.0
info:
  contact:
    email: gamebase@gahr.dev
    url: https://gahr.dev
  description: This is the REST API used as an communication layer between backend
    and frontend.
  title: GameBase Communication API
  version: 2.3.0
externalDocs:
  description: Learn more about GameBase
  url: https://blog.game-base.de
servers:
- description: Dev Backend version of REST service
  url: https://dev.game-base.de
- description: Live Backend version of REST service
  url: https://game-base.de
- description: SwaggerHub API Auto Mocking
  url: https://virtserver.swaggerhub.com/GameBase9/gamebase_communication_api/2.1.0
tags:
- description: Game server and container management endpoints
  name: gameserver
- description: Authentication endpoints
  name: auth
- description: User management endpoints
  name: user
paths:
  /gs/status:
    get:
      operationId: getStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GameContainerStatus'
                type: array
          description: Successful operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
          description: Containers' status could not be fetched
      security:
      - Bearer: []
      summary: Query status of all deployments
      tags:
      - gameserver
  /gs/start/{id}:
    post:
      operationId: startContainer
      parameters:
      - description: ID of game server to start
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Start successful
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
          description: Start failed
      security:
      - Bearer: []
      summary: Start a game server/container
      tags:
      - gameserver
  /gs/stop/{id}:
    post:
      operationId: stopContainer
      parameters:
      - description: ID of game server to stop
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Stop successful
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
          description: Stop failed
      security:
      - Bearer: []
      summary: Stop a game server/container
      tags:
      - gameserver
  /gs/restart/{id}:
    post:
      operationId: restartContainer
      parameters:
      - description: ID of game server to restart
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Restart successful
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
          description: Restart failed
      security:
      - Bearer: []
      summary: Restart a game server/container
      tags:
      - gameserver
  /gs/deploy:
    post:
      operationId: deployContainer
      requestBody:
        $ref: '#/components/requestBodies/GameContainerDeployment'
      responses:
        "201":
          description: Deployment successful
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
          description: Deployment failed
        "400":
          description: Invalid input
      security:
      - Bearer: []
      summary: Deploy a game server based on POST body
      tags:
      - gameserver
  /gs/configure/{id}:
    post:
      operationId: configureContainer
      parameters:
      - description: ID of game server to configure
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/GameContainerConfiguration'
      responses:
        "201":
          description: Configuration successful
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
          description: Configuration failed
        "400":
          description: Invalid input
      security:
      - Bearer: []
      summary: Configure a game server based on POST body
      tags:
      - gameserver
  /gs/destroy/{id}:
    delete:
      operationId: deleteContainer
      parameters:
      - description: ID of game server to delete
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Deletion successful
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
          description: Deletion failed
      security:
      - Bearer: []
      summary: Delete deployment of game server
      tags:
      - gameserver
  /gs/templates:
    get:
      operationId: listTemplates
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Query successful
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
          description: Query failed
      security:
      - Bearer: []
      summary: Get a list of all available game server templates
      tags:
      - gameserver
  /auth/login:
    post:
      requestBody:
        $ref: '#/components/requestBodies/UserLogin'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Login successful
        "403":
          description: Login failed
        "400":
          description: Invalid input
      summary: Login a user and return a JWT with the user object
      tags:
      - auth
  /auth/register:
    post:
      requestBody:
        $ref: '#/components/requestBodies/UserRegister'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Registration successful
        "403":
          description: Registration failed
        "400":
          description: Invalid input
      summary: Register a user and return a JWT with the user object
      tags:
      - auth
  /auth/logout:
    delete:
      responses:
        "200":
          description: Logout successful
        "400":
          description: Invalid input
      security:
      - Bearer: []
      summary: Invalidate the passed JWT
      tags:
      - auth
  /user/update:
    post:
      operationId: updateUserProfile
      requestBody:
        $ref: '#/components/requestBodies/UserProfile'
      responses:
        "200":
          description: Successful operation
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
          description: User's profile could not be updated
      security:
      - Bearer: []
      summary: Update fields of a user's profile
      tags:
      - user
components:
  requestBodies:
    UserProfile:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserProfile'
    UserLogin:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserLogin'
    UserRegister:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserRegister'
    GameContainerDeployment:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GameContainerDeployment'
      description: Game server template which will be used for server creation
      required: true
    GameContainerConfiguration:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GameContainerConfiguration'
      description: Configuration for game server
      required: true
  schemas:
    Status:
      default: UNKNOWN
      enum:
      - UNKNOWN
      - STARTING
      - RUNNING
      - STOPPED
      - ERROR
      type: string
    RestartBehavior:
      default: none
      enum:
      - none
      - unless-stopped
      - on-failure
      - always
      type: string
    UserLogin:
      example:
        password: password
        email: email
      properties:
        email:
          description: Email address of the user
          type: string
        password:
          description: The password of the user
          type: string
      required:
      - email
      - password
      type: object
    UserRegister:
      example:
        password: password
        fullName: fullName
        confirmPassword: confirmPassword
        email: email
      properties:
        fullName:
          description: Full name of the user
          type: string
        email:
          description: Email address of the user
          type: string
        password:
          description: The password of the user
          type: string
        confirmPassword:
          description: The password confirmation of the user (must be equal to password)
          type: string
      required:
      - confirmPassword
      - email
      - password
      type: object
    User:
      example:
        fullName: fullName
        email: email
        token: token
      properties:
        email:
          description: Email address of the user
          type: string
        fullName:
          description: The full name of the user
          type: string
        token:
          description: The JWT of the users session
          type: string
      required:
      - email
      - fullName
      - token
      type: object
    UserProfile:
      example:
        password:
          new: new
          old: old
        gravatar: gravatar
        email: email
        username: username
      properties:
        username:
          description: Username of the user
          type: string
        email:
          description: E-mail address of the user
          type: string
        password:
          $ref: '#/components/schemas/UserProfile_password'
        gravatar:
          description: E-mail address of the Gravatar to be used
          type: string
      type: object
    Exception:
      properties:
        id:
          description: ID of container causing this exception
          type: string
        exception:
          description: Short Exception code
          type: string
        details:
          description: Detailed message of issue
          type: string
      required:
      - details
      - exception
      type: object
    Protocol:
      default: TCP
      enum:
      - TCP
      - UDP
      type: string
    PortMapping:
      example:
        containerPort: 6
        nodePort: 0
      properties:
        protocol:
          $ref: '#/components/schemas/Protocol'
        nodePort:
          description: Externally exposed Port Number
          format: int16
          type: integer
        containerPort:
          description: Internal Port Number routed to Container
          format: int16
          type: integer
      required:
      - containerPort
      - nodePort
      - protocol
      type: object
    GameContainerStatus:
      example:
        configuration:
          resources:
            startupArgs: startupArgs
            memory: 1
            environmentVars:
              key: environmentVars
            ports:
            - containerPort: 6
              nodePort: 0
            - containerPort: 6
              nodePort: 0
            templatePath: templatePath
          details:
            serverName: serverName
            description: description
        gameServerDetails:
          key: gameServerDetails
        id: id
      properties:
        id:
          description: ID of game server container
          type: string
        status:
          $ref: '#/components/schemas/Status'
        configuration:
          $ref: '#/components/schemas/GameContainerConfiguration'
        gameServerDetails:
          additionalProperties:
            type: string
          description: Dynamic details by game server monitoring agent
          type: object
      type: object
    GameServerDetails:
      additionalProperties:
        type: string
      description: Dynamic details by game server monitoring agent
      type: object
    GameContainerDeployment:
      example:
        templatePath: templatePath
      properties:
        templatePath:
          description: Template path of backend directory that is going to be used
            for game container creation
          type: string
      required:
      - templatePath
      type: object
    GameContainerConfiguration:
      example:
        resources:
          startupArgs: startupArgs
          memory: 1
          environmentVars:
            key: environmentVars
          ports:
          - containerPort: 6
            nodePort: 0
          - containerPort: 6
            nodePort: 0
          templatePath: templatePath
        details:
          serverName: serverName
          description: description
      properties:
        details:
          $ref: '#/components/schemas/GameContainerConfiguration_details'
        resources:
          $ref: '#/components/schemas/GameContainerConfiguration_resources'
      required:
      - details
      - resources.templatePath
      type: object
    UserProfile_password:
      example:
        new: new
        old: old
      properties:
        old:
          description: Old password of the user as a confirmation step
          type: string
        new:
          description: New desired password of the user
          type: string
    GameContainerConfiguration_details:
      description: General details of server
      example:
        serverName: serverName
        description: description
      properties:
        serverName:
          description: Name of server that will displayed on one's Dashboard
          type: string
        description:
          description: Short description of server which will be displayed on one's
            Dashboard
          type: string
    GameContainerConfiguration_resources:
      example:
        startupArgs: startupArgs
        memory: 1
        environmentVars:
          key: environmentVars
        ports:
        - containerPort: 6
          nodePort: 0
        - containerPort: 6
          nodePort: 0
        templatePath: templatePath
      properties:
        templatePath:
          description: Template path of backend directory that is going to be used
            for game container creation
          type: string
        ports:
          description: PortMappings for the Container
          items:
            $ref: '#/components/schemas/PortMapping'
          type: array
        memory:
          default: -1
          description: Memory to be allocated
          type: integer
        startupArgs:
          description: Command with arguments that will be run upon container creation/start
          type: string
        restartBehavior:
          $ref: '#/components/schemas/RestartBehavior'
        environmentVars:
          additionalProperties:
            type: string
          description: Environment variables that configure the game server
          type: object
  securitySchemes:
    Bearer:
      description: |
        For accessing the API a valid JWT token must be passed in all the queries in
        the 'Authorization' header.
        A valid JWT token is generated by the API and retourned as answer of a call
        to the route /login giving a valid user & password.
        The following syntax must be used in the 'Authorization' header :
            Bearer xxxxxx.yyyyyyy.zzzzzz
      in: header
      name: Authorization
      type: apiKey
